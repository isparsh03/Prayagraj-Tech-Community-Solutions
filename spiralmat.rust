fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {
    let (mut top, mut bottom, mut left, mut right) = (0, matrix.len() as i32 - 1, 0, matrix[0].len() as i32 - 1);
    let mut result = Vec::new();

    while top <= bottom && left <= right {
        for i in left..=right {
            result.push(matrix[top as usize][i as usize]);
        }
        top += 1;

        for i in top..=bottom {
            result.push(matrix[i as usize][right as usize]);
        }
        right -= 1;

        if top <= bottom {
            for i in (left..=right).rev() {
                result.push(matrix[bottom as usize][i as usize]);
            }
            bottom -= 1;
        }

        if left <= right {
            for i in (top..=bottom).rev() {
                result.push(matrix[i as usize][left as usize]);
            }
            left += 1;
        }
    }

    result
}

// Even Matrix
let even_matrix = vec![
    vec![1, 2, 3],
    vec![4, 5, 6],
    vec![7, 8, 9]
];
let even_result = spiral_order(even_matrix);
println!("{:?}", even_result);

// Odd Matrix
let odd_matrix = vec![
    vec![1, 2, 3, 4],
    vec![5, 6, 7, 8],
    vec![9, 10, 11, 12],
    vec![13, 14, 15, 16]
];
let odd_result = spiral_order(odd_matrix);
println!("{:?}", odd_result);
